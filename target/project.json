{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":10588653002380251703,"abi":{"parameters":[{"name":"password","type":{"kind":"field"},"visibility":"private"},{"name":"stored_hash","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VV2w7CIAyFXbztTed/tAMcvPkrLs7//wLjjJDUTn1w5SRNG9jODocOtHqhmWKj5tAxn2M2cLJ27LsRDV6gC4N3YN1w8ujReXftvDGjt74PQ+ghoDUj3lwwN3ihJFywEDl1Vv/rRD7w1LafomJa77Euv9RVrNN79RSrKdZxryr1jpJ5AMuAWtDPWpBrK7dG4Hvyq6dgGVBSN9W7yyl4l4G3EWyGXOtuiMFCvG8HViGsuRD0tFGyjfrpJ9Mka+YJnd+yfCTzgpcJJv42Dz+s1RxHUrdsndSLs5CGxJcuilrNUbC59OyG6dPy+lAxlB++lXCIuSVjyc8HxvpCQdUIAAA=","debug_symbols":"3dPRCoMgFAbgdznXXZiVbr7KGGFlIYiG2WBE7z6LXLGNRbdd/ud8HvgvHKASRd/kUtemA3YbQJmSO2m0TwOgedS1XE+pc9w6YElGIhC6ApZiNEZQSyWAYTJGXxRTHCym6Q6O6SVZcHxBeAej9+UY0ew/vqaBJqskeLxHEJ++IT59w+RXw9Vn6MOnB3120JND3ofCSqVkk2//nh8/uJW8UGKJda/LzdY927AJ71trSlH1VkyX5p0//wI=","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use std::hash::poseidon2;\n\nfn main(password: Field, stored_hash: pub Field) -> pub bool {\n    poseidon2::Poseidon2::hash([password], 1) == stored_hash\n}\n\n#[test]\nfn test_password_hash() {\n    let password_input = 1;\n    let stored_hash = poseidon2::Poseidon2::hash([password_input], 1);\n\n    std::println(stored_hash);\n    let result = main(password_input, stored_hash);\n    assert(result);\n}\n","path":"/Users/christian.leovido/workspace/zk-password/project/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}